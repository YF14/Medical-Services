// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByNulls"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid()) @db.Uuid
  phoneNumber String    @unique @db.VarChar(255)
  name        String    @db.VarChar(255)
  password    String    @db.VarChar(255)
  role        Role      @relation(fields: [roleId], references: [id])
  roleId      String    @unique @db.Uuid
  setting     Setting   @relation(fields: [settingId], references: [id])
  address     Address   @relation(fields: [addressId], references: [id])
  addressId   String    @unique @db.Uuid
  settingId   String    @unique @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dr          Dr?       @relation("dr")
  hf          Hf?       @relation("hf")
  favoritedr  Dr[]      @relation("fav")
  favoritehf  Hf[]      @relation("favhf")
  booking     Booking[]
  otp         Otp?      @relation(fields: [otpId], references: [id])
  otpId       Int?
}

model Address {
  id   String @id @default(uuid()) @db.Uuid
  city String
  town String
  user User?
}

model Role {
  id       String  @id @default(uuid()) @db.Uuid
  name     String  @default("user") @db.VarChar(255)
  isVerify Boolean @default(false)
  isActive Boolean @default(true)
  user     User?
}

model Setting {
  id String @id @default(uuid()) @db.Uuid

  avatar   String?
  language String   @default("ar") @db.VarChar(9)
  darkmode Boolean  @default(false)
  bio      String?  @db.VarChar(255)
  dob      DateTime
  gender   String   @db.VarChar(9)
  user     User?
}

model Dr {
  id               String        @id @default(uuid()) @db.Uuid
  user             User?         @relation("dr", fields: [userId], references: [id], onDelete: Cascade)
  userId           String?       @unique @db.Uuid
  cost             Float
  openAt           Int
  closeAt          Int
  rating           Float?
  xp               Int           @default(0)
  description      String?       @db.Text
  magerSpecialties String
  specialties      Specialties[]
  isAvailable      Boolean       @default(false)
  favuser          User[]        @relation("fav")
  hf               Hf?           @relation(fields: [hfId], references: [id])
  hfId             String?       @db.Uuid
  booking          Booking[]

  bookingAv BookingAv[]
}

model Hf {
  id                 String        @id @default(uuid()) @db.Uuid
  user               User?         @relation("hf", fields: [userId], references: [id])
  userId             String?       @unique @db.Uuid
  drNumbers          Int           @default(0)
  openAt             Int
  closeAt            Int
  rating             Float?
  specialtiesNumbers Int           @default(0)
  isAvailable        Boolean
  description        String?       @db.Text
  favUser            User[]        @relation("favhf")
  specialties        Specialties[]
  dr                 Dr[]
}

model Specialties {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(255)
  photo String
  hf    Hf[]
  dr    Dr[]
}

model BookingAv {
  id   String   @id @default(uuid()) @db.Uuid
  dr   Dr       @relation(fields: [drId], references: [id])
  drId String   @db.Uuid
  date DateTime @db.Date
  openAt String
  closeAt String
  time TimeAv[]
}

model TimeAv {
  id        String      @id @default(uuid()) @db.Uuid
  av        Boolean     @default(true)
  time      String  
  BookingAv BookingAv[]
}

model Booking {
  id          String @id @default(uuid()) @db.Uuid
  user        User @relation(fields: [userId], references: [id])
  userId      String @db.Uuid
  dr          Dr   @relation(fields: [drId], references: [id])
  drId        String @db.Uuid
  phoneNumber String
  name        String
  time        String
  qrCode      String
}

model Otp {
  id      Int      @id @default(autoincrement())
  otp     Int
  exp     DateTime
  timeOut DateTime
  User    User[]
}
